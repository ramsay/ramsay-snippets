#!/usr/bin/env python
''' Robert Ramsay 2011
Breathalyzer

To safeguard against the dreaded phenomenon of wall posting while
drunk, Facebook is implementing a feature that detects when post
content is too garbled to have been done while sober and informs the
user that they need to take an online breathalyzer test before being
allowed to post.

Unfortunately, there is far too much content for a given set of persons
to evaluate by hand. Fortunately, you are a programmer of some repute
and can write a program that processes and evaluates wall posts. You
realize that such a program would be of great use to society and intend
to resolve the problem once and for all. The program you write must
compute a score for a body of text, returning this score upon
completion.

Your program will be given a list of accepted words and run on one wall
post at a time. For each word W in the post, you must find word W' from
the list of accepted words such that the number of changes from W to W'
is minimized. It is possible that W is already W' and thus the number
of changes necessary is zero. A change is defined as replacing a single
letter with another letter, adding a letter in any position, or
removing a letter from any position. The total score for the wall post
is the minimum number of changes necessary to make all words in the
post acceptable.


Input Specification

Your program must take a single string argument, representing the file
name containing the wall post to analyze. In addition, your program
must open up and read the accepted word list from the following static
path location:
 /var/tmp/twl06.txt
For testing purposes, you may download and examine the accepted word
list here. When submitting your code, you do not need to include this
file, as it is already present on the machine.

The input file consists entirely of lower case letters and space
characters. You are guaranteed that the input file will start with a
lower case letter, and that all words are separated by at least one
space character. The file may or may not end with a new line character.

Example input file:
 tihs sententcnes iss nout varrry goud
You are guaranteed that your program will run against well formed input
files and that the accepted word list is identical to the one provided
for testing.


Output Specification

Your program must print out the minimum number of changes necessary to
turn all words in the input wall post into accepted words as defined by
the word list file. Words may not be joined together, or separated into
multiple words. A change in a word is defined as one of the following:
Replacing any single letter with another letter.
Adding a single letter in any position.
Removing any single letter.
This score must be printed out as an integer and followed by a single
new line.

Example Output (newline after number):
8
'''
from __future__ import with_statement

def distance(word1, word2):
    '''Levenstein distance method'''
    d = [[i if j==0 else j if i==0 else 0
        for i in range(len(word1)+1)]
        for j in range(len(word2)+1)]
    for j in range(1, len(word1) + 1):
        for i in range(1, len(word2) + 1):
            if word1[j-1] == word2[i-1]:
                d[i][j] = d[i-1][j-1]
            else:
                d[i][j] = min([d[i-1][j], d[i][j-1], d[i-1][j-1]]) + 1
    return d[-1][-1]

'''
D A B =
   let rec
   and MainDiag = OneDiag  A B (hd Uppers) (-1 . (hd Lowers))
   and Uppers   = EachDiag A B (MainDiag.Uppers)  {upper diagonals}
   and Lowers   = EachDiag B A (MainDiag.Lowers)  {lower diagonals}
                                                  {note swap B A !}

   and OneDiag A B diagAbove diagBelow =
         let rec
             DoDiag []       B        NW N W = []  ||
             DoDiag A        []       NW N W = []  ||
             DoDiag (Ach.As) (Bch.Bs) NW N W =
               let me = if Ach = Bch then NW
                        else 1 + min3 (hd W) NW (hd N)   {see below}
               in me . (DoDiag As Bs me (tl N) (tl W))  {along diag}
                           {hope these   ^^^^   ^^^^  not evaluated}

         and firstelt = 1 + hd diagBelow
         and thisdiag =
              firstelt.(DoDiag A B firstelt diagAbove (tl diagBelow))

         in thisdiag

   and EachDiag A []       Diags            = []  ||
       EachDiag A (Bch.Bs) (LastDiag.Diags) =
         let NextDiag = hd(tl Diags)
         in  (OneDiag  A Bs NextDiag LastDiag) {one diag &}
           . (EachDiag A Bs Diags)             {the others}

   and LAB = (length A) - (length B)

   in last (if      LAB=0 then MainDiag
            else if LAB>0 then select   LAB  Lowers
            else   {LAB<0}     select (-LAB) Uppers )

'''

def breathalyzer(post, words):
    '''Give the cumulaitive Levenshtein distance of the wall post from
    the word list.'''
    sentence = post.split(' ')
    for w in words:
        delta = map(sentence, distance(w))
if __name__ == '__main__':
    import sys
    with open('/var/tmp/twl06.txt') as wordlist:
        with open(sys.argv[1]) as wallpost:
            breathalyzer(wallpost.read(), wordlist)
