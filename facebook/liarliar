#!/usr/bin/env python
'''
Liar, Liar

As a newbie on a particular internet discussion board, you notice a
distinct trend among its veteran members; everyone seems to be either
unfailingly honest or compulsively deceptive. You decide to try to
identify the members of the two groups, starting with the assumption
that every senior member either never lies or never tells the truth.
You compile as much data as possible, asking each person for a list of
which people are liars. Since the people you are asking have been
around on the board for a long time, you may assume that they have
perfect knowledge of who is trustworthy and who is not. Each person
will respond with a list of people that they accuse of being liars.
Everyone on the board can see that you are a tremendous n00b, so they
will grudgingly give you only partial lists of who the liars are. Of
course these lists are not to be taken at face value because of all
the lying going on.

You must write a program to determine, given all the information you've
collected from the discussion board members, which members have the
same attitude toward telling the truth. It's a pretty popular
discussion board, so your program will need to be able to process a
large amount of data quickly and efficiently.


Input Specifications

Your program must take a single command line argument; the name of a
file. It must then open the file and read out the input data. The data
begins with the number of veteran members n followed by a newline. It
continues with n chunks of information, each defining the accusations
made by a single member. Each chunk is formatted as follows:
 <accuser name> <m>
followed by m lines each containing the name of one member that the
accuser says is a liar. accuser name and m are separated by some
number of tabs and spaces. m will always be in [0, n]. All member
names contain only alphabetic characters and are unique and case-
sensitive.

Example input file:
 5
Stephen   1
Tommaso
Tommaso   1
Galileo
Isaac     1
Tommaso
Galileo   1
Tommaso
George    2
Isaac
Stephen



Output Specifications

Your output must consist of two numbers separated by a single space and
followed by a newline, printed to standard out. The first number is the
size of the larger group between the liars and the non-liars. The
second number is the size of the smaller group. You are guaranteed that
exactly one correct solution exists for all test data.

Example output:
3 2
'''
from __future__ import with_statement

class LiarFilter:
    '''A liar filter that manages two sets of liars/nonliars. Use
    LiarFilter.add() to update the sets with a pair of member, lies.
    When you've added all the info use LiarFilter.final_answer() to
    sort through undecided data.'''
    def __init__(self):
        self.toms = set()
        self.jerrys = set()
        self.undecided = dict()

    def add(self, member, lies):
        '''Add the member and lies to their matching sets. If sets are
        empty add member to jerry and lies to toms. If nothing matches
        add it the undecided dict.'''
        lies = set(lies)
        if (not self.toms and not self.jerrys or lies & self.toms or
            member in self.jerrys):
            self.toms |= lies
            self.jerrys.add(member)
        elif lies & self.jerrys or member in self.toms:
            self.toms.add(member)
            self.jerrys |= lies
        else:
            self.undecided[member] = lies
            return False
        return True

    def final_answer(self):
        '''Filter through the undecided info until we have made
        everything is decided. Return the size of toms and jerrys as a
        tuple with the first element larger.'''
        while self.undecided:
            for key in self.undecided:
                if self.add(key, self.undecided[key]):
                    self.undecided.pop(key)
        lengths = [len(self.toms), len(self.jerrys)]
        return (max(lengths), min(lengths))

def main(data):
    '''Runs through the input file parsing each heading and adding the
    `name`, `accused` list to our LiarFilter. After parsing the entire
    file we get a final answer on the size of the two groups and print
    out the larger number followed by the smaller number.'''
    liars = LiarFilter()
    membersize = int(data.next())
    while membersize:
        membersize -= 1
        name, count = re.split("\s+", data.next())[:2]
        count = int(count)
        accused = []
        while count:
            count -= 1
            accused.append(data.next().strip())
        liars.add(name, accused)
    print "%d %d" % liars.final_answer()

if __name__ == '__main__':
    import sys
    import re
    with open(sys.argv[1]) as somefile:
        main(somefile)

