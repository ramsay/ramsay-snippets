Timer unit: 1e-06 s

File: Liquid.py
Function: _step1 at line 66
Total time: 53.6235 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    66                                               def _step1(self):
    67    400100       428981      1.1      0.8          for particle in self.particles:
    68    400000       719369      1.8      1.3              particle.cx = int(particle.x - 0.5)
    69    400000       603621      1.5      1.1              particle.cy = int(particle.y - 0.5)
    70                                                       
    71    400000       582869      1.5      1.1              x = float(particle.cx - particle.x)
    72    400000       656446      1.6      1.2              particle.px[0] = 0.5 * x * x + 1.5 * x + 1.125
    73    400000       517953      1.3      1.0              particle.gx[0] = x + 1.5
    74    400000       447333      1.1      0.8              x += 1.0
    75    400000       556863      1.4      1.0              particle.px[1] = -x * x + 0.75
    76    400000       506172      1.3      0.9              particle.gx[1] = -2.0 * x
    77    400000       430138      1.1      0.8              x += 1.0
    78    400000       620223      1.6      1.2              particle.px[2] = 0.5 * x * x - 1.5 * x + 1.125
    79    400000       525523      1.3      1.0              particle.gx[2] = x - 1.5
    80                                           
    81    400000       563995      1.4      1.1              y = float(particle.cy - particle.y)
    82    400000       612079      1.5      1.1              particle.py[0] = 0.5 * y * y + 1.5 * y + 1.125
    83    400000       504416      1.3      0.9              particle.gy[0] = y + 1.5
    84    400000       445405      1.1      0.8              y += 1.0
    85    400000       554228      1.4      1.0              particle.py[1] = -y * y + 0.75
    86    400000       506301      1.3      0.9              particle.gy[1] = -2.0 * y
    87    400000       431738      1.1      0.8              y += 1.0
    88    400000       615993      1.5      1.1              particle.py[2] = 0.5 * y * y - 1.5 * y + 1.125
    89    400000       528247      1.3      1.0              particle.gy[2] = y - 1.5
    90                                           
    91                                           
    92   1600000      1775895      1.1      3.3              for i in RANGE:
    93   4800000      5427508      1.1     10.1                  for j in RANGE:
    94   3600000      4754346      1.3      8.9                      n = self.grid[particle.cx + i][particle.cy + j]
    95   3600000      4372280      1.2      8.2                      if not n.active:
    96    348580       401574      1.2      0.7                          n.active = True
    97    348580      1040425      3.0      1.9                          self.active.add(n)
    98   3600000      4750586      1.3      8.9                      phi = particle.px[i] * particle.py[j]
    99   3600000      5056227      1.4      9.4                      n.m += phi * particle.material.m
   100   3600000      4366582      1.2      8.1                      n.d += phi
   101   3600000      5105804      1.4      9.5                      n.gx += particle.gx[i] * particle.py[j]
   102   3600000      5214388      1.4      9.7                      n.gy += particle.px[i] * particle.gy[j]

File: Liquid.py
Function: _step2 at line 104
Total time: 58.8696 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   104                                               def _step2(self, drag, mdx, mdy):       
   105    400100       531529      1.3      0.9          for p in self.particles:
   106                                           
   107    400000       587394      1.5      1.0              cx = p.x
   108    400000       537338      1.3      0.9              cy = p.y
   109    400000       559526      1.4      1.0              cxi = cx + 1
   110    400000       522347      1.3      0.9              cyi = cy + 1
   111                                           
   112    400000       768979      1.9      1.3              n01 = self.grid[int(cx)][int(cy)]
   113    400000       720142      1.8      1.2              n02 = self.grid[int(cx)][int(cyi)]
   114    400000       729694      1.8      1.2              n11 = self.grid[int(cxi)][int(cy)]
   115    400000       721504      1.8      1.2              n12 = self.grid[int(cxi)][int(cyi)]
   116                                           
   117    400000       623499      1.6      1.1              pdx = n11.d - n01.d
   118    400000       573247      1.4      1.0              pdy = n02.d - n01.d
   119    400000       683324      1.7      1.2              C20 = 3.0 * pdx - n11.gx - 2.0 * n01.gx
   120    400000       646110      1.6      1.1              C02 = 3.0 * pdy - n02.gy - 2.0 * n01.gy
   121    400000       631151      1.6      1.1              C30 = -2.0 * pdx + n11.gx + n01.gx
   122    400000       590980      1.5      1.0              C03 = -2.0 * pdy + n02.gy + n01.gy
   123    400000       606823      1.5      1.0              csum1 = n01.d + n01.gy + C02 + C03
   124    400000       591636      1.5      1.0              csum2 = n01.d + n01.gx + C20 + C30
   125    400000       783078      2.0      1.3              C21 = 3.0 * n12.d - 2.0 * n02.gx - n12.gx - 3.0 * csum1 - C20
   126    400000       699643      1.7      1.2              C31 = -2.0 * n12.d + n02.gx + n12.gx + 2.0 * csum1 - C30
   127    400000       730711      1.8      1.2              C12 = 3.0 * n12.d - 2.0 * n11.gy - n12.gy - 3.0 * csum2 - C02
   128    400000       695201      1.7      1.2              C13 = -2.0 * n12.d + n11.gy + n12.gy + 2.0 * csum2 - C03
   129    400000       624216      1.6      1.1              C11 = n02.gx - C13 - C12 - n01.gx
   130                                           
   131    400000       564334      1.4      1.0              u = p.x - cx
   132    400000       560359      1.4      1.0              u2 = u * u
   133    400000       546384      1.4      0.9              u3 = u * u2
   134    400000       583792      1.5      1.0              v = p.y - cy
   135    400000       553272      1.4      0.9              v2 = v * v
   136    400000       545513      1.4      0.9              v3 = v * v2
   137                                                       density = (n01.d + n01.gx * u + n01.gy * v + C20 * u2 + C02 * v2 + 
   138                                                           C30 * u3 + C03 * v3 + C21 * u2 * v + C31 * u3 * v + C12 * u * 
   139    400000      1041368      2.6      1.8                  v2 + C13 * u * v3 + C11 * u * v)
   140                                           
   141    400000       554470      1.4      0.9              pressure = density - 1.0
   142    400000       588975      1.5      1.0              if pressure > 2.0:
   143     35458        47789      1.3      0.1                  pressure = 2.0
   144                                           
   145    400000       532352      1.3      0.9              fx = 0.0
   146    400000       522754      1.3      0.9              fy = 0.0
   147                                           
   148    400000       625981      1.6      1.1              if p.x < 4.0:
   149      5579        10383      1.9      0.0                  fx += p.material.m * (4.0 - p.x)
   150    394421       642585      1.6      1.1              elif p.x > self.width:
   151                                                           fx += p.material.m * (self.width - p.x)
   152                                           
   153    400000       615723      1.5      1.0              if p.y < 4.0:
   154                                                           fy += p.material.m * (4.0 - p.y)
   155    400000       633882      1.6      1.1              elif p.y > self.height:
   156                                                           fy += p.material.m * (self.height - p.y)
   157                                           
   158    400000       588473      1.5      1.0              if drag:
   159                                                           vx = math.fabs(p.x - 0.25 * self.mx)
   160                                                           vy = math.fabs(p.y - 0.25 * self.my)
   161                                                           if  vx < 10.0 > vy:
   162                                                               weight = p.material.m * (1.0 - vx * 0.10) * (1.0 - vy * 0.10)
   163                                                               fx += weight * (mdx - p.u)
   164                                                               fy += weight * (mdy - p.v)
   165                                           
   166   1600000      2280324      1.4      3.9              for i in RANGE:
   167   4800000      6898832      1.4     11.7                  for j in RANGE:
   168   3600000      5868513      1.6     10.0                      n = self.grid[p.cx + i][p.cy + j]
   169   3600000      5875382      1.6     10.0                      phi = p.px[i] * p.py[j]
   170   3600000      7079666      2.0     12.0                      n.ax += -(p.gx[i] * p.py[j] * pressure) + fx * phi
   171   3600000      6950430      1.9     11.8                      n.ay += -(p.px[i] * p.gy[j] * pressure) + fy * phi

File: Liquid.py
Function: _step3 at line 180
Total time: 35.8187 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   180                                               def _step3(self):
   181    400100       262564      0.7      0.7          for p in self.particles:
   182   1600000      1063143      0.7      3.0              for i in RANGE:
   183   4800000      3205400      0.7      8.9                  for j in RANGE:
   184   3600000      3252418      0.9      9.1                      n = self.grid[p.cx + i][p.cy + j]
   185   3600000      3197307      0.9      8.9                      phi = p.px[i] * p.py[j]
   186   3600000      3361343      0.9      9.4                      p.u += phi * n.ax
   187   3600000      3275756      0.9      9.1                      p.v += phi * n.ay
   188    400000       353109      0.9      1.0              mu = p.material.m * p.u
   189    400000       319699      0.8      0.9              mv = p.material.m * p.v
   190   1600000      1092102      0.7      3.0              for i in RANGE:
   191   4800000      3384103      0.7      9.4                  for j in RANGE:
   192   3600000      3306207      0.9      9.2                      n = self.grid[p.cx + i][p.cy + j]
   193   3600000      3228025      0.9      9.0                      phi = p.px[i] * p.py[j]
   194   3600000      3266616      0.9      9.1                      n.u += phi * mu
   195   3600000      3250870      0.9      9.1                      n.v += phi * mv

File: Liquid.py
Function: _step4 at line 203
Total time: 23.7737 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   203                                               def _step4(self):
   204    400100       326772      0.8      1.4          for p in self.particles:
   205    400000       309302      0.8      1.3              gu = 0.0
   206    400000       304722      0.8      1.3              gv = 0.0
   207   1600000      1323680      0.8      5.6              for i  in RANGE:
   208   4800000      3927120      0.8     16.5                  for j  in RANGE:
   209   3600000      3718570      1.0     15.6                      n = self.grid[p.cx + i][p.cy + j]
   210   3600000      3695395      1.0     15.5                      phi = p.px[i] * p.py[j]
   211   3600000      3375962      0.9     14.2                      gu += phi * n.u
   212   3600000      3330926      0.9     14.0                      gv += phi * n.v
   213    400000       416213      1.0      1.8              p.x += gu
   214    400000       395252      1.0      1.7              p.y += gv
   215    400000       459334      1.1      1.9              p.u += 1.0 * (gu - p.u)
   216    400000       441209      1.1      1.9              p.v += 1.0 * (gv - p.v)
   217    400000       405999      1.0      1.7              if p.x < 1.0:
   218                                                           p.x = 1.0 + random.random() * 0.01
   219                                                           p.u = 0.0
   220    400000       437362      1.1      1.8              elif p.x > self.width - 2:
   221      4071         5457      1.3      0.0                  p.x = self.width - 2 - random.random() * 0.01
   222      4071         3607      0.9      0.0                  p.u = 0.0
   223    400000       393021      1.0      1.7              if p.y < 1.0:
   224                                                           p.y = 1.0 + random.random() * 0.01
   225                                                           p.v = 0.0
   226    400000       422430      1.1      1.8              elif p.y > self.height - 2:
   227     38104        49220      1.3      0.2                  p.y = self.height - 2 - random.random() * 0.01
   228     38104        32148      0.8      0.1                  p.v = 0.0

