Timer unit: 1e-06 s

File: Liquid.py
Function: _step1 at line 64
Total time: 57.4828 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                               def _step1(self):
    65    400100       405651      1.0      0.7          for particle in self.particles:
    66    400000       712766      1.8      1.2              particle.cx = int(particle.x - 0.5)
    67    400000       568526      1.4      1.0              particle.cy = int(particle.y - 0.5)
    68                                                       
    69    400000       560491      1.4      1.0              x = float(particle.cx - particle.x)
    70    400000       641133      1.6      1.1              particle.px[0] = (0.5 * x * x + 1.5 * x + 1.125)
    71    400000       518368      1.3      0.9              particle.gx[0] = (x + 1.5)
    72    400000       430800      1.1      0.7              x += 1.0
    73    400000       519520      1.3      0.9              particle.px[1] = (-x * x + 0.75)
    74    400000       486503      1.2      0.8              particle.gx[1] = (-2.0 * x)
    75    400000       431918      1.1      0.8              x += 1.0
    76    400000       572820      1.4      1.0              particle.px[2] = (0.5 * x * x - 1.5 * x + 1.125)
    77    400000       495530      1.2      0.9              particle.gx[2] = (x - 1.5)
    78                                           
    79    400000       539305      1.3      0.9              y = float(particle.cy - particle.y)
    80    400000       584971      1.5      1.0              particle.py[0] = (0.5 * y * y + 1.5 * y + 1.125)
    81    400000       504882      1.3      0.9              particle.gy[0] = (y + 1.5)
    82    400000       429793      1.1      0.7              y += 1.0
    83    400000       513395      1.3      0.9              particle.py[1] = (-y * y + 0.75)
    84    400000       482351      1.2      0.8              particle.gy[1] = (-2.0 * y)
    85    400000       433508      1.1      0.8              y += 1.0
    86    400000       567500      1.4      1.0              particle.py[2] = (0.5 * y * y - 1.5 * y + 1.125)
    87    400000       497867      1.2      0.9              particle.gy[2] = (y - 1.5)
    88                                           
    89                                           
    90   1600000      1896818      1.2      3.3              for i in range(3):
    91   4800000      5739964      1.2     10.0                  for j in range(3):
    92   3600000      4656443      1.3      8.1                      n = self.grid[particle.cx + i][particle.cy + j]
    93   3600000      9256504      2.6     16.1                      if not n in self.active:
    94    360311       903143      2.5      1.6                          self.active.add(n)
    95   3600000      4837629      1.3      8.4                      phi = particle.px[i] * particle.py[j]
    96   3600000      5053283      1.4      8.8                      n.m += phi * particle.material.m
    97   3600000      4277227      1.2      7.4                      n.d += phi
    98   3600000      4995864      1.4      8.7                      n.gx += particle.gx[i] * particle.py[j]
    99   3600000      4968319      1.4      8.6                      n.gy += particle.px[i] * particle.gy[j]

File: Liquid.py
Function: _step2 at line 101
Total time: 59.8798 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   101                                               def _step2(self, drag, mdx, mdy):
   102       100          154      1.5      0.0          fx = 0.0
   103       100          134      1.3      0.0          fy = 0.0        
   104    400100       519612      1.3      0.9          for p in self.particles:
   105                                           
   106    400000       576023      1.4      1.0              cx = p.x
   107    400000       527292      1.3      0.9              cy = p.y
   108    400000       557726      1.4      0.9              cxi = cx + 1
   109    400000       529218      1.3      0.9              cyi = cy + 1
   110                                           
   111    400000       772912      1.9      1.3              n01 = self.grid[int(cx)][int(cy)]
   112    400000       704067      1.8      1.2              n02 = self.grid[int(cx)][int(cyi)]
   113    400000       711855      1.8      1.2              n11 = self.grid[int(cxi)][int(cy)]
   114    400000       704413      1.8      1.2              n12 = self.grid[int(cxi)][int(cyi)]
   115                                           
   116    400000       621400      1.6      1.0              pdx = n11.d - n01.d
   117    400000       573546      1.4      1.0              pdy = n02.d - n01.d
   118    400000       664139      1.7      1.1              C20 = 3.0 * pdx - n11.gx - 2.0 * n01.gx
   119    400000       633367      1.6      1.1              C02 = 3.0 * pdy - n02.gy - 2.0 * n01.gy
   120    400000       611324      1.5      1.0              C30 = -2.0 * pdx + n11.gx + n01.gx
   121    400000       602911      1.5      1.0              C03 = -2.0 * pdy + n02.gy + n01.gy
   122    400000       612517      1.5      1.0              csum1 = n01.d + n01.gy + C02 + C03
   123    400000       608027      1.5      1.0              csum2 = n01.d + n01.gx + C20 + C30
   124    400000       774722      1.9      1.3              C21 = 3.0 * n12.d - 2.0 * n02.gx - n12.gx - 3.0 * csum1 - C20
   125    400000       698869      1.7      1.2              C31 = -2.0 * n12.d + n02.gx + n12.gx + 2.0 * csum1 - C30
   126    400000       725597      1.8      1.2              C12 = 3.0 * n12.d - 2.0 * n11.gy - n12.gy - 3.0 * csum2 - C02
   127    400000       694119      1.7      1.2              C13 = -2.0 * n12.d + n11.gy + n12.gy + 2.0 * csum2 - C03
   128    400000       622037      1.6      1.0              C11 = n02.gx - C13 - C12 - n01.gx
   129                                           
   130    400000       559988      1.4      0.9              u = p.x - cx
   131    400000       539168      1.3      0.9              u2 = u * u
   132    400000       537221      1.3      0.9              u3 = u * u2
   133    400000       558133      1.4      0.9              v = p.y - cy
   134    400000       546660      1.4      0.9              v2 = v * v
   135    400000       530909      1.3      0.9              v3 = v * v2
   136                                                       density = (n01.d + n01.gx * u + n01.gy * v + C20 * u2 + C02 * v2 + 
   137                                                           C30 * u3 + C03 * v3 + C21 * u2 * v + C31 * u3 * v + C12 * u * 
   138    400000      1034033      2.6      1.7                  v2 + C13 * u * v3 + C11 * u * v)
   139                                           
   140    400000       553337      1.4      0.9              pressure = density - 1.0
   141    400000       606132      1.5      1.0              if pressure > 2.0:
   142     37728        50524      1.3      0.1                  pressure = 2.0
   143                                           
   144    400000       524990      1.3      0.9              fx = 0.0
   145    400000       523222      1.3      0.9              fy = 0.0
   146                                           
   147    400000       607248      1.5      1.0              if (p.x < 4.0):
   148      5761        10385      1.8      0.0                  fx += p.material.m * (4.0 - p.x)
   149    394239       649030      1.6      1.1              elif (p.x > self.width - 5):
   150      2858         5424      1.9      0.0                  fx += p.material.m * (self.width - 5 - p.x)
   151                                           
   152    400000       613237      1.5      1.0              if (p.y < 4.0):
   153                                                           fy += p.material.m * (4.0 - p.y)
   154    400000       649003      1.6      1.1              elif (p.y > self.height - 5):
   155     17327        32530      1.9      0.1                  fy += p.material.m * (self.height - 5 - p.y)
   156                                           
   157    400000       588084      1.5      1.0              if drag:
   158                                                           vx = math.fabs(p.x - 0.25 * self.mx)
   159                                                           vy = math.fabs(p.y - 0.25 * self.my)
   160                                                           if ((vx < 10.0) and (vy < 10.0)):
   161                                                               weight = p.material.m * (1.0 - vx * 0.10) * (1.0 - vy * 0.10)
   162                                                               fx += weight * (mdx - p.u)
   163                                                               fy += weight * (mdy - p.v)
   164                                           
   165   1600000      2453762      1.5      4.1              for i in range(3):
   166   4800000      7429263      1.5     12.4                  for j in range(3):
   167   3600000      5935752      1.6      9.9                      n = self.grid[p.cx + i][p.cy + j]
   168   3600000      5967617      1.7     10.0                      phi = p.px[i] * p.py[j]
   169   3600000      7181266      2.0     12.0                      n.ax += -((p.gx[i] * p.py[j]) * pressure) + fx * phi
   170   3600000      7146927      2.0     11.9                      n.ay += -((p.px[i] * p.gy[j]) * pressure) + fy * phi

File: Liquid.py
Function: _step3 at line 179
Total time: 38.0228 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   179                                               def _step3(self):
   180    400100       276400      0.7      0.7          for p in self.particles:
   181   1600000      1248061      0.8      3.3              for i in range(3):
   182   4800000      3747340      0.8      9.9                  for j in range(3):
   183   3600000      3334343      0.9      8.8                      n = self.grid[p.cx + i][p.cy + j]
   184   3600000      3251076      0.9      8.6                      phi = p.px[i] * p.py[j]
   185   3600000      3458924      1.0      9.1                      p.u += phi * n.ax
   186   3600000      3375871      0.9      8.9                      p.v += phi * n.ay
   187    400000       368608      0.9      1.0              mu = p.material.m * p.u
   188    400000       330929      0.8      0.9              mv = p.material.m * p.v
   189   1600000      1281625      0.8      3.4              for i in range(3):
   190   4800000      3934051      0.8     10.3                  for j in range(3):
   191   3600000      3388701      0.9      8.9                      n = self.grid[p.cx + i][p.cy + j]
   192   3600000      3288882      0.9      8.6                      phi = p.px[i] * p.py[j]
   193   3600000      3379002      0.9      8.9                      n.u += phi * mu
   194   3600000      3358952      0.9      8.8                      n.v += phi * mv

File: Liquid.py
Function: _step4 at line 202
Total time: 23.3247 s

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   202                                               def _step4(self):
   203    400100       315278      0.8      1.4          for p in self.particles:
   204    400000       294434      0.7      1.3              gu = 0.0
   205    400000       287163      0.7      1.2              gv = 0.0
   206   1600000      1413622      0.9      6.1              for i  in range(3):
   207   4800000      4149445      0.9     17.8                  for j  in range(3):
   208   3600000      3586755      1.0     15.4                      n = self.grid[p.cx + i][p.cy + j]
   209   3600000      3556642      1.0     15.2                      phi = p.px[i] * p.py[j]
   210   3600000      3287647      0.9     14.1                      gu += phi * n.u
   211   3600000      3199307      0.9     13.7                      gv += phi * n.v
   212    400000       399957      1.0      1.7              p.x += gu
   213    400000       375698      0.9      1.6              p.y += gv
   214    400000       448682      1.1      1.9              p.u += 1.0 * (gu - p.u)
   215    400000       418568      1.0      1.8              p.v += 1.0 * (gv - p.v)
   216    400000       396453      1.0      1.7              if (p.x < 1.0):
   217                                                           p.x = (1.0 + random.random() * 0.01)
   218                                                           p.u = 0.0
   219    400000       424460      1.1      1.8              elif (p.x > self.width - 2):
   220         1            2      2.0      0.0                  p.x = (self.width - 2 - random.random() * 0.01)
   221         1            1      1.0      0.0                  p.u = 0.0
   222    400000       375087      0.9      1.6              if (p.y < 1.0):
   223                                                           p.y = (1.0 + random.random() * 0.01)
   224                                                           p.v = 0.0
   225    400000       395419      1.0      1.7              elif (p.y > self.height - 2):
   226        13           35      2.7      0.0                  p.y = (self.height - 2 - random.random() * 0.01)
   227        13           11      0.8      0.0                  p.v = 0.0

